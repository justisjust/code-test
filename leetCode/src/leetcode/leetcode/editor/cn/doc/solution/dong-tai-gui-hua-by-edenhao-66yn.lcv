### 解题思路

### 动规五部曲

1. 确定dp数组（dp table）以及下标的含义
2. 确定递推公式
3. dp数组如何初始化
4. 确定遍历顺序
5. 打印dp数组 --> 调试代码用
   ![立刻脚后跟发.drawio1111.png](https://pic.leetcode-cn.com/1659340921-BDdFaa-%E7%AB%8B%E5%88%BB%E8%84%9A%E5%90%8E%E8%B7%9F%E5%8F%91.drawio1111.png)

### 代码

* java

```java
class Solution {
    public String longestPalindrome(String s) {
        int len = s.length();
        // 定义 dp 数组; dp[i][j] 数组的含义: 下标 i 到 j 的字串是不是回文串(i < j)
        boolean[][] dp = new boolean[len][len];
        // 初始化 dp 数组：单个字母必定是回文串 --> dp[i][j] && i = i 肯定是回文串
        for (int i = 0; i < len; i ++) {
            dp[i][i] = true;
        }

        char[] ss = s.toCharArray();
        // 定义最大回文串的长度，和最大回文串的起始位置
        int max = 1, start = 0;
        for (int j = 1; j < len; j ++) {
            for (int i = 0; i < len - 1 && i < j; i ++) {
                // 如果字串的首位不相等，那么一定不是回文串
                if (ss[i] != ss[j]) {
                    dp[i][j] = false;
                }
                else {
                    // 如果首位字符相等，处理边界条件 -- > 处理这三种情况 ：aba, aa, a
                    if (j - i <= 2) {
                        dp[i][j] = true; // 如果是上述三种情况（j - i >= 2）那么必定是回文串
                    }
                    else {
                        dp[i][j] = dp[i + 1][j - 1];
                    }
                }

                // j - i + 1 : 根据 index 下标求字串的长度
                if (dp[i][j] && j - i + 1 > max) {
                    max = j - i + 1;
                    // 更新回文串下标的起始位置
                    start = i;
                }
            }
        }
        return s.substring(start, start + max);
    }
}
```

