1. 首先确定使用动态规划的思路来求解
2. 先计算出第一行中的所有解，即计算出所有dp[0][col]的值
3. 再计算出所有第一列的解，即计算出所有dp[row][0]的值
4. 之后可以得到推到方程：dp[row][col] = Math.min(dp[row - 1][col], dp[row][col - 1]) + grid[row][col]

* 

```
class Solution {
    public int minPathSum(int[][] grid) {
        int row = grid.length;
        int col = grid[0].length;
        int[][] dp = new int[row][col];

        dp[0][0] = grid[0][0];
        for (int i = 1; i < row; i ++) {
            dp[i][0] = dp[i - 1][0] + grid[i][0];
        }

        for (int i = 1; i < col; i++) {
            dp[0][i] = dp[0][i - 1] + grid[0][i];
        }

        for (int i = 1; i < row; i++) {
            for (int j = 1; j < col; j++) {
                dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];
            }
        }

        return dp[row - 1][col - 1];
    }
}
```

