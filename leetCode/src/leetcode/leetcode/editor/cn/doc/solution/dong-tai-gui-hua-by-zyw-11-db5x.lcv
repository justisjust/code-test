### 解题思路

此处撰写解题思路

### 代码

* java

```java
class Solution {
    public int minPathSum(int[][] grid) {
int row = grid.length;
        int col = grid[0].length;

        int[][] dp = new int[row][col];

        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                dp[i][j] = Integer.MAX_VALUE;
            }
        }

        // 把边缘的先赋值
        int tempRow = 0;
        for (int i = 0; i < row; i++ ) {
            tempRow = tempRow + grid[i][0];
            dp[i][0] = tempRow;
        }

        int tempCol = 0;
        for (int j = 0; j < col; j++ ) {
            tempCol = tempCol + grid[0][j];
            dp[0][j] = tempCol;
        }

        for (int i = 1; i < row; i++) {
            for (int j = 1; j < col; j++) {
                dp[i][j] = Math.min(dp[i][j], Math.min(dp[i][j-1]+grid[i][j], dp[i-1][j]+grid[i][j]));
            }
        }

        return dp[row-1][col-1];
    }
}
```

