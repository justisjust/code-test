### 解题思路

#### 提示一

num1和num2如果有1个是`0`，则直接返回"0"。

#### 提示二

记num1的长度为m，num2的长度为n，则`num1 * num2`的结果的长度为`m + n - 1` 或 `m + n`，这里我们直接记为`m + n`；
我们用例子2来做分析：
![image.png](https://pic.leetcode.cn/1670497326-RJTWhR-image.png)
num1中的3在字符串中的索引为**2**，num2中5在字符串中的索引为**1**，它们相乘的结果集应放在索引为**4**的位置上，即`i + j + 1`上。

* java

```java
int[] ansArr = new int[m + n];
for (int i = m - 1; i >= 0; i--) {
    int x = cs1[i] - '0';
    for (int j = n - 1; j >= 0; j--) {
        int y = cs2[j] - '0';
        ansArr[i + j + 1] += x * y;
    }
}
```

#### 提示三

我们将提示二中得到的ansArr再转换为字符串即可得到结果。

* java

```java
StringBuilder sb = new StringBuilder();
int carry = 0;
for (int i = m + n - 1; i > 0; i--) {
    int sum = ansArr[i] + carry;
    sb.append(sum % 10);
    carry = sum / 10;
}
if (carry != 0) sb.append(carry);
return sb.reverse().toString();
```

### 代码

* java

```java
class Solution {
    public String multiply(String num1, String num2) {
        if ("0".equals(num1) || "0".equals(num2)) return "0";
        int m = num1.length(), n = num2.length();
        char[] cs1 = num1.toCharArray(), cs2 = num2.toCharArray();
        int[] ansArr = new int[m + n];
        for (int i = m - 1; i >= 0; i--) {
            int x = cs1[i] - '0';
            for (int j = n - 1; j >= 0; j--) {
                int y = cs2[j] - '0';
                ansArr[i + j + 1] += x * y;
            }
        }
        StringBuilder sb = new StringBuilder();
        int carry = 0;
        for (int i = m + n - 1; i > 0; i--) {
            int sum = ansArr[i] + carry;
            sb.append(sum % 10);
            carry = sum / 10;
        }
        if (carry != 0) sb.append(carry);
        return sb.reverse().toString();
    }
}
```

![image.png](https://pic.leetcode.cn/1670497181-phfPYN-image.png)
